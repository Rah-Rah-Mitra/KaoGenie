# src/deep_searcher/models/exam_models.py
from pydantic import BaseModel, Field, model_validator, ValidationError
from typing import List, Optional

# --- Search & Ingestion Models ---
class GeneratedQueries(BaseModel):
    queries: List[str] = Field(description="A list of targeted search engine queries.")

class IngestionSummary(BaseModel):
    message: str
    processed_sources_count: int
    total_chunks_ingested: int
    collections_created: List[str]
    ingested_sources: List[str] = Field(description="A list of unique source URLs verified to be in the vector store.")

# --- API Input Models ---
class QuestionSpec(BaseModel):
    question_type: str = Field(..., description="Type of question, e.g., 'MCQ', 'Math Problem', 'Open-Ended'")
    count: int = Field(..., gt=0, description="Number of questions of this type to generate.")
    prompt: Optional[str] = Field(None, description="Optional user prompt for styling.")

class ExamFromTopicRequest(BaseModel):
    subject: str = Field(..., example="Quantum Physics")
    grade_level: str = Field(..., example="University Graduate")
    exam_title: str = Field(..., example="Midterm Exam: Quantum Mechanics I")
    question_specs: List[QuestionSpec] = Field(
        ..., 
        description="A list of sections, each defining the type and number of questions.",
        example=[
            {"question_type": "Open-Ended", "count": 3, "prompt": "Focus on foundational concepts."},
            {"question_type": "MCQ", "count": 5, "prompt": "Test understanding of key definitions."}
        ]
    )


# --- Agent I/O Models ---
class GeneratedQuestionSpecs(BaseModel):
    question_specs: List[QuestionSpec] = Field(description="A list of question specifications generated by an AI agent.")

class GeneratedQuestion(BaseModel):
    question_text: str
    options: Optional[List[str]] = None
    image_url: Optional[str] = None

class GeneratedQuestions(BaseModel):
    questions: List[GeneratedQuestion]

class GeneratedSolution(BaseModel):
    explanation: str
    final_answer: Optional[str] = None
    correct_option_index: Optional[int] = None

class ExamQuestion(BaseModel):
    id: str = Field(description="A unique identifier for this question.")
    question_type: str
    question_text: str
    options: Optional[List[str]] = None
    image_url: Optional[str] = None
    solution: GeneratedSolution

class CompiledExam(BaseModel):
    exam_paper: str
    answer_key: str

# --- API Output Models ---
class FullExam(BaseModel):
    exam_id: str
    ingestion_summary: IngestionSummary
    exam_title: str
    exam_paper_markdown: str
    answer_key_markdown: str
    questions: List[ExamQuestion]
    sources_used: List[str]